version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: arketic-postgres
    environment:
      POSTGRES_DB: arketic
      POSTGRES_USER: arketic
      POSTGRES_PASSWORD: arketic_password
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U arketic -d arketic"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: arketic-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Arketic Backend
  backend:
    build: .
    container_name: arketic-backend
    environment:
      # Database
      DATABASE_URL: postgresql://arketic:arketic_password@postgres:5432/arketic
      REDIS_URL: redis://redis:6379/0
      
      # Security
      SECRET_KEY: development-secret-key-change-in-production-32-chars
      JWT_EXPIRE_MINUTES: 30
      
      # Application
      ENVIRONMENT: development
      DEBUG: true
      LOG_LEVEL: INFO
      
      # CORS
      ALLOWED_ORIGINS: http://localhost:3000,http://localhost:8080,http://localhost:3001
      
      # Features
      ENABLE_METRICS: true
      ENABLE_COST_TRACKING: false
      
      # File Upload
      UPLOAD_DIR: /tmp/uploads
      MAX_FILE_SIZE: 104857600
      
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./uploads:/tmp/uploads
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

volumes:
  postgres_data:
  redis_data: