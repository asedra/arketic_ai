{
  "error": "Required test failed: Docker Startup Test",
  "stack": "Error: Required test failed: Docker Startup Test\n    at TestRunner.executeTestSuite (/home/ali/arketic/docker-tests/run-tests.js:118:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async TestRunner.run (/home/ali/arketic/docker-tests/run-tests.js:37:7)",
  "completedTests": [
    {
      "name": "Docker Startup Test",
      "file": "01-docker-startup.test.js",
      "success": false,
      "exitCode": 1,
      "duration": 185811,
      "stdout": "  console.log\n    \u001b[36m[INFO]\u001b[0m Test session started\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m üöÄ Starting Docker Application Startup Test Suite\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m üß™ Starting test: Stop all existing containers\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    üõë Stopping all Docker containers...\n\n      at DockerManager.log [as stopAllContainers] (utils/docker-manager.js:49:13)\n\n  console.log\n    ‚úÖ All containers stopped and removed\n\n      at DockerManager.log [as stopAllContainers] (utils/docker-manager.js:58:15)\n\n  console.log\n    \u001b[32m[SUCCESS]\u001b[0m ‚úÖ Test passed: Stop all existing containers (876ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m üß™ Starting test: Clean up Docker resources\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    üßπ Cleaning up Docker resources...\n\n      at DockerManager.log [as cleanup] (utils/docker-manager.js:69:13)\n\n  console.log\n    ‚úÖ Docker cleanup completed\n\n      at DockerManager.log [as cleanup] (utils/docker-manager.js:74:15)\n\n  console.log\n    \u001b[32m[SUCCESS]\u001b[0m ‚úÖ Test passed: Clean up Docker resources (742ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m üß™ Starting test: Start Docker Compose services\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    üöÄ Starting Docker Compose services...\n\n      at DockerManager.log [as startDockerCompose] (utils/docker-manager.js:84:13)\n\n#1 [internal] load local bake definitions\n#1 reading from stdin 1.14kB done\n#1 DONE 0.0s\n\n#2 [web internal] load build definition from Dockerfile\n#2 transferring dockerfile: 2.53kB done\n#2 DONE 0.0s\n\n#3 [web internal] load metadata for docker.io/library/node:20-alpine\n#3 ...\n\n#4 [api internal] load build definition from Dockerfile\n#4 transferring dockerfile: 2.39kB done\n#4 DONE 0.1s\n\n#5 [api internal] load metadata for docker.io/library/python:3.11-slim\n#5 DONE 0.0s\n\n#6 [api internal] load .dockerignore\n#6 transferring context: 961B done\n#6 DONE 0.0s\n\n#7 [api base 1/5] FROM docker.io/library/python:3.11-slim\n#7 DONE 0.0s\n\n#8 [api internal] load build context\n#8 transferring context: 282.17kB done\n#8 DONE 0.0s\n\n#9 [api base 2/5] RUN apt-get update && apt-get install -y --no-install-recommends     build-essential     curl     git     libpq-dev     tesseract-ocr     tesseract-ocr-eng     libtesseract-dev     poppler-utils     ffmpeg     libsm6     libxext6     libfontconfig1     libxrender1     libgl1-mesa-glx     ca-certificates     && rm -rf /var/lib/apt/lists/*     && apt-get clean     && apt-get autoremove -y\n#9 CACHED\n\n#10 [api runner 1/3] COPY --from=deps --chown=arketic:arketic /home/arketic/.local /home/arketic/.local\n#10 CACHED\n\n#11 [api deps 1/2] COPY requirements.txt .\n#11 CACHED\n\n#12 [api base 3/5] RUN useradd --create-home --shell /bin/bash arketic\n#12 CACHED\n\n#13 [api runner 2/3] COPY --chown=arketic:arketic . ./\n#13 CACHED\n\n#14 [api deps 2/2] RUN pip install --user --no-cache-dir --upgrade pip setuptools wheel &&     pip install --user --no-cache-dir -r requirements.txt &&     pip install --user --no-cache-dir gunicorn uvloop httptools\n#14 CACHED\n\n#15 [api base 4/5] WORKDIR /app\n#15 CACHED\n\n#16 [api base 5/5] RUN chown -R arketic:arketic /app\n#16 CACHED\n\n#17 [api runner 3/3] RUN mkdir -p uploads logs temp &&     chmod 755 uploads logs temp\n#17 CACHED\n\n#18 [api] exporting to image\n#18 exporting layers done\n#18 writing image sha256:d29d588b5eceb3368590b8a60a3145c7e6bc302fd267f4cc4590ea1cbb43a2ce done\n#18 naming to docker.io/library/arketic-test-api done\n#18 DONE 0.0s\n\n#19 [api] resolving provenance for metadata file\n#19 DONE 0.0s\n\n#3 [web internal] load metadata for docker.io/library/node:20-alpine\n#3 DONE 0.5s\n\n#20 [web internal] load .dockerignore\n#20 transferring context: 1.17kB done\n#20 DONE 0.0s\n\n#21 [web base 1/3] FROM docker.io/library/node:20-alpine@sha256:df02558528d3d3d0d621f112e232611aecfee7cbc654f6b375765f72bb262799\n#21 DONE 0.0s\n\n#22 [web internal] load build context\n#22 transferring context: 463.97kB done\n#22 DONE 0.0s\n\n#23 [web base 2/3] RUN apk add --no-cache libc6-compat curl\n#23 CACHED\n\n#24 [web base 3/3] WORKDIR /app\n#24 CACHED\n\n#25 [web deps 2/2] RUN npm install --legacy-peer-deps\n#25 CACHED\n\n#26 [web deps 1/2] COPY package*.json ./\n#26 CACHED\n\n#27 [web development 2/3] COPY --from=deps /app/node_modules ./node_modules\n#27 CACHED\n\n#28 [web development 1/3] WORKDIR /app\n#28 CACHED\n\n#29 [web development 3/3] COPY package*.json ./\n#29 CACHED\n\n#30 [web] exporting to image\n#30 exporting layers done\n#30 writing image sha256:6ec3295d7fae9ff6a65fd51ae5266df9b7dbf0f262bcdffe86a4170a73b63a9b done\n#30 naming to docker.io/library/arketic-test-web done\n#30 DONE 0.0s\n\n#31 [web] resolving provenance for metadata file\n#31 DONE 0.0s\n  console.log\n    ‚úÖ Docker Compose services started\n\n      at DockerManager.log [as startDockerCompose] (utils/docker-manager.js:101:15)\n\n  console.log\n    \u001b[32m[SUCCESS]\u001b[0m ‚úÖ Test passed: Start Docker Compose services (49366ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m üß™ Starting test: Wait for services to be healthy\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    üè• Waiting for services to be healthy...\n\n      at DockerManager.log [as waitForHealthy] (utils/docker-manager.js:111:13)\n\n.......................  console.log\n    \u001b[36m[INFO]\u001b[0m üß™ Starting test: Verify PostgreSQL container health\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[32m[SUCCESS]\u001b[0m ‚úÖ Test passed: Verify PostgreSQL container health (47ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m üß™ Starting test: Verify Redis container health\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[32m[SUCCESS]\u001b[0m ‚úÖ Test passed: Verify Redis container health (44ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m üß™ Starting test: Verify API container health\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[32m[SUCCESS]\u001b[0m ‚úÖ Test passed: Verify API container health (42ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m üß™ Starting test: Verify Web container health\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[32m[SUCCESS]\u001b[0m ‚úÖ Test passed: Verify Web container health (41ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m üß™ Starting test: Verify Nginx container health\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[31m[ERROR]\u001b[0m ‚ùå Test failed: Verify Nginx container health (44ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m üß™ Starting test: Connect to PostgreSQL database\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[32m[SUCCESS]\u001b[0m ‚úÖ Test passed: Connect to PostgreSQL database (15ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m Database version: PostgreSQL 15.13 on x86_64-pc-linux-musl, compiled by gcc (Alpine 14.2.0) 14.2.0, 64-bit\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m üß™ Starting test: Connect to Redis cache\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[32m[SUCCESS]\u001b[0m ‚úÖ Test passed: Connect to Redis cache (9ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m Redis connection successful\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m üß™ Starting test: Access API health endpoint\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[32m[SUCCESS]\u001b[0m ‚úÖ Test passed: Access API health endpoint (28ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[32m[SUCCESS]\u001b[0m üìä Performance: API Health Check - response_time: 28ms (threshold: 500ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m üß™ Starting test: Access Web health endpoint\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[32m[SUCCESS]\u001b[0m ‚úÖ Test passed: Access Web health endpoint (10ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[32m[SUCCESS]\u001b[0m üìä Performance: Web Health Check - response_time: 10ms (threshold: 2000ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m üß™ Starting test: Access Nginx health endpoint\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[32m[SUCCESS]\u001b[0m ‚úÖ Test passed: Access Nginx health endpoint (5ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[32m[SUCCESS]\u001b[0m üìä Performance: Nginx Health Check - response_time: 5ms (threshold: 500ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m üß™ Starting test: Verify API database connection\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[31m[ERROR]\u001b[0m ‚ùå Test failed: Verify API database connection (5ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m üß™ Starting test: Verify API Redis connection\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[31m[ERROR]\u001b[0m ‚ùå Test failed: Verify API Redis connection (4ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m üß™ Starting test: Verify Web API connection\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[32m[SUCCESS]\u001b[0m ‚úÖ Test passed: Verify Web API connection (7ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m üß™ Starting test: Verify Nginx proxy functionality\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n.  console.log\n    \u001b[31m[ERROR]\u001b[0m ‚ùå Test failed: Wait for services to be healthy (124793ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[31m[ERROR]\u001b[0m Container status at failure:\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[31m[ERROR]\u001b[0m NAME                      IMAGE                COMMAND                  SERVICE    CREATED         STATUS                     PORTS\n    arketic-test-api-1        arketic-test-api     \"python -m uvicorn m‚Ä¶\"   api        2 minutes ago   Up 2 minutes (healthy)     0.0.0.0:8000->8000/tcp, [::]:8000->8000/tcp\n    arketic-test-nginx-1      nginx:alpine         \"/docker-entrypoint.‚Ä¶\"   nginx      2 minutes ago   Up 2 minutes (unhealthy)   0.0.0.0:80->80/tcp, [::]:80->80/tcp\n    arketic-test-postgres-1   postgres:15-alpine   \"docker-entrypoint.s‚Ä¶\"   postgres   2 minutes ago   Up 2 minutes (healthy)     0.0.0.0:5432->5432/tcp, [::]:5432->5432/tcp\n    arketic-test-redis-1      redis:7-alpine       \"docker-entrypoint.s‚Ä¶\"   redis      2 minutes ago   Up 2 minutes (healthy)     0.0.0.0:6379->6379/tcp, [::]:6379->6379/tcp\n    arketic-test-web-1        arketic-test-web     \"docker-entrypoint.s‚Ä¶\"   web        2 minutes ago   Up 2 minutes (healthy)     0.0.0.0:3000->3000/tcp, [::]:3000->3000/tcp\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[31m[ERROR]\u001b[0m ‚ùå Test failed: Verify Nginx proxy functionality (7500ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m üß™ Starting test: Log container resource usage\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m Container Resource Usage:\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m CONTAINER                                                          CPU %     MEM USAGE / LIMIT\n    6b59c1a40a18f17a509baa13b6d2d876b3ffab14261efa7113c8f8e2235438fc   0.08%     99.25MiB / 15.51GiB\n    3e9f362f549543c5b4e06398f403517dd5d30ad8b906adf0248a94efb4953caf   0.00%     18.24MiB / 15.51GiB\n    ea6f22a00336acb90676f1c1a8bd1b28f545206e3c78c4f23f86d4c688563ca5   0.24%     24.57MiB / 15.51GiB\n    ec504feb67933d2e1dfec882ad5dccde8a3577112642358d1656e839edbd6ee4   0.25%     10.29MiB / 15.51GiB\n    c870d9b823680cc1ed4df630d4084c379112c24665ea4522f42f4970622c6d5a   74.18%    797.6MiB / 15.51GiB\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[32m[SUCCESS]\u001b[0m ‚úÖ Test passed: Log container resource usage (2585ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m üß™ Starting test: Confirm Docker environment readiness\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[31m[ERROR]\u001b[0m ‚ùå Test failed: Confirm Docker environment readiness (0ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m ‚è±Ô∏è  Total test suite duration: 3.1m\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n",
      "stderr": "‚óè Validation Warning:\n\n  Unknown option \"runInBand\" with value true was found.\n  This is probably a typing mistake. Fixing it will remove this message.\n\n  Configuration Documentation:\n  https://jestjs.io/docs/configuration\n\n‚óè Validation Warning:\n\n  Unknown option \"runInBand\" with value true was found.\n  This is probably a typing mistake. Fixing it will remove this message.\n\n  Configuration Documentation:\n  https://jestjs.io/docs/configuration\n\n arketic-test-api  Built\n arketic-test-web  Built\n Network arketic_dev_network  Creating\n Network arketic_dev_network  Created\n Container arketic-test-postgres-1  Creating\n Container arketic-test-redis-1  Creating\n Container arketic-test-redis-1  Created\n Container arketic-test-postgres-1  Created\n Container arketic-test-api-1  Creating\n Container arketic-test-api-1  Created\n Container arketic-test-web-1  Creating\n Container arketic-test-web-1  Created\n Container arketic-test-nginx-1  Creating\n Container arketic-test-nginx-1  Created\n Container arketic-test-redis-1  Starting\n Container arketic-test-postgres-1  Starting\n Container arketic-test-postgres-1  Started\n Container arketic-test-redis-1  Started\n Container arketic-test-redis-1  Waiting\n Container arketic-test-postgres-1  Waiting\n Container arketic-test-postgres-1  Healthy\n Container arketic-test-redis-1  Healthy\n Container arketic-test-api-1  Starting\n Container arketic-test-api-1  Started\n Container arketic-test-api-1  Waiting\n Container arketic-test-api-1  Healthy\n Container arketic-test-web-1  Starting\n Container arketic-test-web-1  Started\n Container arketic-test-nginx-1  Starting\n Container arketic-test-nginx-1  Started\nFAIL tests/01-docker-startup.test.js (185.331 s)\n  Docker Application Startup Test\n    Phase 1: Environment Cleanup\n      ‚úì should stop all existing containers (888 ms)\n      ‚úì should clean up Docker resources (745 ms)\n    Phase 2: Docker Compose Startup\n      ‚úì should start Docker Compose services (49367 ms)\n      ‚úï should wait for all services to be healthy (123630 ms)\n    Phase 3: Container Health Verification\n      ‚úì should verify PostgreSQL container is healthy (50 ms)\n      ‚úì should verify Redis container is healthy (46 ms)\n      ‚úì should verify API container is healthy (44 ms)\n      ‚úì should verify Web container is healthy (44 ms)\n      ‚úï should verify Nginx container is healthy (46 ms)\n    Phase 4: Basic Service Connectivity\n      ‚úì should connect to PostgreSQL database (16 ms)\n      ‚úì should connect to Redis cache (11 ms)\n      ‚úì should access API health endpoint (30 ms)\n      ‚úì should access Web health endpoint (12 ms)\n      ‚úì should access Nginx health endpoint (7 ms)\n    Phase 5: Service Integration Verification\n      ‚úï should verify API can connect to database (6 ms)\n      ‚úï should verify API can connect to Redis (6 ms)\n      ‚úì should verify Web can connect to API (8 ms)\n      ‚úï should verify Nginx can proxy to Web and API (7500 ms)\n    Phase 6: Environment Readiness Confirmation\n      ‚úì should log container resource usage (2588 ms)\n      ‚úï should confirm Docker environment is ready for testing (2 ms)\n\n  ‚óè Docker Application Startup Test ‚Ä∫ Phase 2: Docker Compose Startup ‚Ä∫ should wait for all services to be healthy\n\n    thrown: \"Exceeded timeout of 120000 ms for a test.\n    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.\"\n\n      100 |     }, 120000);\n      101 |\n    > 102 |     test('should wait for all services to be healthy', async () => {\n          |     ^\n      103 |       logger.logTestStart('Wait for services to be healthy');\n      104 |       const startTime = Date.now();\n      105 |       \n\n      at test (tests/01-docker-startup.test.js:102:5)\n      at describe (tests/01-docker-startup.test.js:80:3)\n      at Object.describe (tests/01-docker-startup.test.js:19:1)\n\n  ‚óè Docker Application Startup Test ‚Ä∫ Phase 3: Container Health Verification ‚Ä∫ should verify Nginx container is healthy\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"healthy\"\n    Received: \"unhealthy\"\n\n      246 |         \n      247 |         expect(container.State).toBe('running');\n    > 248 |         expect(container.Health).toBe('healthy');\n          |                                  ^\n      249 |         \n      250 |         const duration = Date.now() - startTime;\n      251 |         logger.logTestPass('Verify Nginx container health', duration);\n\n      at Object.toBe (tests/01-docker-startup.test.js:248:34)\n\n  ‚óè Docker Application Startup Test ‚Ä∫ Phase 5: Service Integration Verification ‚Ä∫ should verify API can connect to database\n\n    expect(received).toHaveProperty(path)\n\n    Expected path: \"database\"\n    Received path: []\n\n    Received value: {\"environment\": \"development\", \"status\": \"healthy\", \"timestamp\": \"2025-08-05T20:17:22.222891\", \"version\": \"1.0.0\"}\n\n      379 |         \n      380 |         expect(result.success).toBe(true);\n    > 381 |         expect(result.data).toHaveProperty('database');\n          |                             ^\n      382 |         expect(result.data.database).toBe('healthy');\n      383 |         \n      384 |         const duration = Date.now() - startTime;\n\n      at Object.toHaveProperty (tests/01-docker-startup.test.js:381:29)\n\n  ‚óè Docker Application Startup Test ‚Ä∫ Phase 5: Service Integration Verification ‚Ä∫ should verify API can connect to Redis\n\n    expect(received).toHaveProperty(path)\n\n    Expected path: \"redis\"\n    Received path: []\n\n    Received value: {\"environment\": \"development\", \"status\": \"healthy\", \"timestamp\": \"2025-08-05T20:17:22.227892\", \"version\": \"1.0.0\"}\n\n      401 |         \n      402 |         expect(result.success).toBe(true);\n    > 403 |         expect(result.data).toHaveProperty('redis');\n          |                             ^\n      404 |         expect(result.data.redis).toBe('healthy');\n      405 |         \n      406 |         const duration = Date.now() - startTime;\n\n      at Object.toHaveProperty (tests/01-docker-startup.test.js:403:29)\n\n  ‚óè Docker Application Startup Test ‚Ä∫ Phase 5: Service Integration Verification ‚Ä∫ should verify Nginx can proxy to Web and API\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      445 |         // Test Nginx proxying to API\n      446 |         const apiResult = await testUtils.makeRequest('GET', 'http://localhost:80/api/health');\n    > 447 |         expect(apiResult.success).toBe(true);\n          |                                   ^\n      448 |         \n      449 |         const duration = Date.now() - startTime;\n      450 |         logger.logTestPass('Verify Nginx proxy functionality', duration);\n\n      at Object.toBe (tests/01-docker-startup.test.js:447:35)\n\n  ‚óè Docker Application Startup Test ‚Ä∫ Phase 6: Environment Readiness Confirmation ‚Ä∫ should confirm Docker environment is ready for testing\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      484 |       try {\n      485 |         // Verify all critical components are working\n    > 486 |         expect(dockerManager.isRunning).toBe(true);\n          |                                         ^\n      487 |         \n      488 |         // Final connectivity checks\n      489 |         const dbCheck = await testUtils.testDatabaseConnection();\n\n      at Object.toBe (tests/01-docker-startup.test.js:486:41)\n\nTest Suites: 1 failed, 1 total\nTests:       6 failed, 14 passed, 20 total\nSnapshots:   0 total\nTime:        185.365 s\nRan all test suites matching /\\/home\\/ali\\/arketic\\/docker-tests\\/tests\\/01-docker-startup.test.js/i.\n"
    }
  ],
  "timestamp": "2025-08-05T20:17:32.471Z"
}