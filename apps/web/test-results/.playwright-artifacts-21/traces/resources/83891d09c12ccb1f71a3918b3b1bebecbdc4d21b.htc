1:"$Sreact.fragment"
2:I["(app-pages-browser)/./node_modules/next/dist/client/components/layout-router.js",["app-pages-internals","static/chunks/app-pages-internals.js"],""]
3:I["(app-pages-browser)/./node_modules/next/dist/client/components/render-from-template-context.js",["app-pages-internals","static/chunks/app-pages-internals.js"],""]
4:I["(app-pages-browser)/./node_modules/next/dist/client/components/client-page.js",["app-pages-internals","static/chunks/app-pages-internals.js"],"ClientPageRoot"]
5:I["(app-pages-browser)/./app/dashboard/page.tsx",["app/dashboard/page","static/chunks/app/dashboard/page.js"],"default"]
6:I["(app-pages-browser)/./node_modules/next/dist/client/components/metadata/metadata-boundary.js",["app-pages-internals","static/chunks/app-pages-internals.js"],"OutletBoundary"]
d:I["(app-pages-browser)/./node_modules/next/dist/client/components/metadata/async-metadata.js",["app-pages-internals","static/chunks/app-pages-internals.js"],"AsyncMetadataOutlet"]
10:I["(app-pages-browser)/./node_modules/next/dist/client/components/error-boundary.js",["app-pages-internals","static/chunks/app-pages-internals.js"],""]
11:I["(app-pages-browser)/./node_modules/next/dist/client/components/client-segment.js",["app-pages-internals","static/chunks/app-pages-internals.js"],"ClientSegmentRoot"]
12:I["(app-pages-browser)/./node_modules/next/dist/client/components/http-access-fallback/error-boundary.js",["app-pages-internals","static/chunks/app-pages-internals.js"],"HTTPAccessFallbackBoundary"]
13:I["(app-pages-browser)/./node_modules/next/dist/client/components/metadata/metadata-boundary.js",["app-pages-internals","static/chunks/app-pages-internals.js"],"MetadataBoundary"]
14:I["(app-pages-browser)/./node_modules/next/dist/client/components/metadata/metadata-boundary.js",["app-pages-internals","static/chunks/app-pages-internals.js"],"ViewportBoundary"]
21:"$Sreact.suspense"
22:I["(app-pages-browser)/./node_modules/next/dist/client/components/metadata/async-metadata.js",["app-pages-internals","static/chunks/app-pages-internals.js"],"AsyncMetadata"]
8:{"name":"__next_outlet_boundary__","env":"Server","key":null,"owner":null,"stack":[],"props":{"ready":"$E(async function getViewportReady() {\n        await viewport();\n        return undefined;\n    })"}}
7:D"$8"
a:{"name":"__next_outlet_boundary__","env":"Server","key":null,"owner":null,"stack":[],"props":{"ready":"$E(async function getMetadataReady() {\n        // Only warm up metadata() call when it's blocking metadata,\n        // otherwise it will be fully managed by AsyncMetadata component.\n        if (!serveStreamingMetadata) {\n            await metadata();\n        }\n        return undefined;\n    })"}}
9:D"$a"
c:{"name":"StreamingMetadataOutlet","env":"Server","key":null,"owner":null,"stack":[],"props":{}}
b:D"$c"
b:["$","$Ld",null,{"promise":"$@e"},"$c",[],1]
15:{"name":"NonIndex","env":"Server","key":null,"owner":null,"stack":[],"props":{"ctx":{"componentMod":{"GlobalError":"$10","__next_app__":{"require":"$E(function __webpack_require__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\tvar threw = true;\n/******/ \t\ttry {\n/******/ \t\t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n/******/ \t\t\tthrew = false;\n/******/ \t\t} finally {\n/******/ \t\t\tif(threw) delete __webpack_module_cache__[moduleId];\n/******/ \t\t}\n/******/ \t\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t})","loadChunk":"$E(() => Promise.resolve())"},"pages":["/app/app/dashboard/page.tsx"],"routeModule":{"userland":{"loaderTree":["","$Y","$Y"]},"definition":"$Y"},"tree":"$Y","ClientPageRoot":"$4","ClientSegmentRoot":"$11","HTTPAccessFallbackBoundary":"$12","LayoutRouter":"$2","MetadataBoundary":"$13","OutletBoundary":"$6","Postpone":"$E(function Postpone({ reason, route }) {\n    const prerenderStore = _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();\n    const dynamicTracking = prerenderStore && prerenderStore.type === 'prerender-ppr' ? prerenderStore.dynamicTracking : null;\n    postponeWithTracking(route, reason, dynamicTracking);\n})","RenderFromTemplateContext":"$3","ViewportBoundary":"$14","actionAsyncStorage":"$Y","collectSegmentData":"$E(async function collectSegmentData(shouldAssumePartialData, fullPageDataBuffer, staleTime, clientModules, serverConsumerManifest, fallbackRouteParams) {\n    // Traverse the router tree and generate a prefetch response for each segment.\n    // A mutable map to collect the results as we traverse the route tree.\n    const resultMap = new Map();\n    // Before we start, warm up the module cache by decoding the page data once.\n    // Then we can assume that any remaining async tasks that occur the next time\n    // are due to hanging promises caused by dynamic data access. Note we only\n    // have to do this once per page, not per individual segment.\n    //\n    try {\n        await (0, _clientedge.createFromReadableStream)((0, _nodewebstreamshelper.streamFromBuffer)(fullPageDataBuffer), {\n            serverConsumerManifest\n        });\n        await (0, _scheduler.waitAtLeastOneReactRenderTask)();\n    } catch  {}\n    // Create an abort controller that we'll use to stop the stream.\n    const abortController = new AbortController();\n    const onCompletedProcessingRouteTree = async ()=>{\n        // Since all we're doing is decoding and re-encoding a cached prerender, if\n        // serializing the stream takes longer than a microtask, it must because of\n        // hanging promises caused by dynamic data.\n        await (0, _scheduler.waitAtLeastOneReactRenderTask)();\n        abortController.abort();\n    };\n    // Generate a stream for the route tree prefetch. While we're walking the\n    // tree, we'll also spawn additional tasks to generate the segment prefetches.\n    // The promises for these tasks are pushed to a mutable array that we will\n    // await once the route tree is fully rendered.\n    const segmentTasks = [];\n    const { prelude: treeStream } = await (0, _staticedge.unstable_prerender)(// RootTreePrefetch is not a valid return type for a React component, but\n    // we need to use a component so that when we decode the original stream\n    // inside of it, the side effects are transferred to the new stream.\n    // @ts-expect-error\n    /*#__PURE__*/ (0, _jsxruntime.jsx)(PrefetchTreeData, {\n        shouldAssumePartialData: shouldAssumePartialData,\n        fullPageDataBuffer: fullPageDataBuffer,\n        fallbackRouteParams: fallbackRouteParams,\n        serverConsumerManifest: serverConsumerManifest,\n        clientModules: clientModules,\n        staleTime: staleTime,\n        segmentTasks: segmentTasks,\n        onCompletedProcessingRouteTree: onCompletedProcessingRouteTree\n    }), clientModules, {\n        signal: abortController.signal,\n        onError: onSegmentPrerenderError\n    });\n    // Write the route tree to a special `/_tree` segment.\n    const treeBuffer = await (0, _nodewebstreamshelper.streamToBuffer)(treeStream);\n    resultMap.set('/_tree', treeBuffer);\n    // Now that we've finished rendering the route tree, all the segment tasks\n    // should have been spawned. Await them in parallel and write the segment\n    // prefetches to the result map.\n    for (const [segmentPath, buffer] of (await Promise.all(segmentTasks))){\n        resultMap.set(segmentPath, buffer);\n    }\n    return resultMap;\n})","createMetadataComponents":"$E(function createMetadataComponents({ tree, searchParams, metadataContext, getDynamicParamFromSegment, appUsingSizeAdjustment, errorType, createServerParamsForMetadata, workStore, MetadataBoundary, ViewportBoundary, serveStreamingMetadata }) {\n    function ViewportTree() {\n        return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {\n            children: [\n                /*#__PURE__*/ (0, _jsxruntime.jsx)(ViewportBoundary, {\n                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(Viewport, {})\n                }),\n                appUsingSizeAdjustment ? /*#__PURE__*/ (0, _jsxruntime.jsx)(\"meta\", {\n                    name: \"next-size-adjust\",\n                    content: \"\"\n                }) : null\n            ]\n        });\n    }\n    function MetadataTree() {\n        return /*#__PURE__*/ (0, _jsxruntime.jsx)(MetadataBoundary, {\n            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(Metadata, {})\n        });\n    }\n    function viewport() {\n        return getResolvedViewport(tree, searchParams, getDynamicParamFromSegment, createServerParamsForMetadata, workStore, errorType);\n    }\n    async function Viewport() {\n        try {\n            return await viewport();\n        } catch (error) {\n            if (!errorType && (0, _httpaccessfallback.isHTTPAccessFallbackError)(error)) {\n                try {\n                    return await getNotFoundViewport(tree, searchParams, getDynamicParamFromSegment, createServerParamsForMetadata, workStore);\n                } catch  {}\n            }\n            // We don't actually want to error in this component. We will\n            // also error in the MetadataOutlet which causes the error to\n            // bubble from the right position in the page to be caught by the\n            // appropriate boundaries\n            return null;\n        }\n    }\n    Viewport.displayName = _metadataconstants.VIEWPORT_BOUNDARY_NAME;\n    function metadata() {\n        return getResolvedMetadata(tree, searchParams, getDynamicParamFromSegment, metadataContext, createServerParamsForMetadata, workStore, errorType);\n    }\n    async function resolveFinalMetadata() {\n        let result;\n        let error = null;\n        try {\n            result = await metadata();\n            return {\n                metadata: result,\n                error: null,\n                digest: undefined\n            };\n        } catch (metadataErr) {\n            error = metadataErr;\n            if (!errorType && (0, _httpaccessfallback.isHTTPAccessFallbackError)(metadataErr)) {\n                try {\n                    result = await getNotFoundMetadata(tree, searchParams, getDynamicParamFromSegment, metadataContext, createServerParamsForMetadata, workStore);\n                    return {\n                        metadata: result,\n                        error,\n                        digest: error == null ? void 0 : error.digest\n                    };\n                } catch (notFoundMetadataErr) {\n                    error = notFoundMetadataErr;\n                    // In PPR rendering we still need to throw the postpone error.\n                    // If metadata is postponed, React needs to be aware of the location of error.\n                    if (serveStreamingMetadata && (0, _ispostpone.isPostpone)(notFoundMetadataErr)) {\n                        throw notFoundMetadataErr;\n                    }\n                }\n            }\n            // In PPR rendering we still need to throw the postpone error.\n            // If metadata is postponed, React needs to be aware of the location of error.\n            if (serveStreamingMetadata && (0, _ispostpone.isPostpone)(metadataErr)) {\n                throw metadataErr;\n            }\n            // We don't actually want to error in this component. We will\n            // also error in the MetadataOutlet which causes the error to\n            // bubble from the right position in the page to be caught by the\n            // appropriate boundaries\n            return {\n                metadata: result,\n                error,\n                digest: error == null ? void 0 : error.digest\n            };\n        }\n    }\n    async function Metadata() {\n        const promise = resolveFinalMetadata();\n        if (serveStreamingMetadata) {\n            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Suspense, {\n                fallback: null,\n                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_asyncmetadata.AsyncMetadata, {\n                    promise: promise\n                })\n            });\n        }\n        const metadataState = await promise;\n        return metadataState.metadata;\n    }\n    Metadata.displayName = _metadataconstants.METADATA_BOUNDARY_NAME;\n    async function getMetadataReady() {\n        // Only warm up metadata() call when it's blocking metadata,\n        // otherwise it will be fully managed by AsyncMetadata component.\n        if (!serveStreamingMetadata) {\n            await metadata();\n        }\n        return undefined;\n    }\n    async function getViewportReady() {\n        await viewport();\n        return undefined;\n    }\n    function StreamingMetadataOutlet() {\n        if (serveStreamingMetadata) {\n            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_asyncmetadata.AsyncMetadataOutlet, {\n                promise: resolveFinalMetadata()\n            });\n        }\n        return null;\n    }\n    return {\n        ViewportTree,\n        MetadataTree,\n        getViewportReady,\n        getMetadataReady,\n        StreamingMetadataOutlet\n    };\n})","createPrerenderParamsForClientSegment":"$E(function createPrerenderParamsForClientSegment(underlyingParams, workStore) {\n    const prerenderStore = _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();\n    if (prerenderStore && prerenderStore.type === 'prerender') {\n        const fallbackParams = workStore.fallbackRouteParams;\n        if (fallbackParams) {\n            for(let key in underlyingParams){\n                if (fallbackParams.has(key)) {\n                    // This params object has one of more fallback params so we need to consider\n                    // the awaiting of this params object \"dynamic\". Since we are in dynamicIO mode\n                    // we encode this as a promise that never resolves\n                    return (0, _dynamicrenderingutils.makeHangingPromise)(prerenderStore.renderSignal, '`params`');\n                }\n            }\n        }\n    }\n    // We're prerendering in a mode that does not abort. We resolve the promise without\n    // any tracking because we're just transporting a value from server to client where the tracking\n    // will be applied.\n    return Promise.resolve(underlyingParams);\n})","createPrerenderSearchParamsForClientPage":"$E(function createPrerenderSearchParamsForClientPage(workStore) {\n    if (workStore.forceStatic) {\n        // When using forceStatic we override all other logic and always just return an empty\n        // dictionary object.\n        return Promise.resolve({});\n    }\n    const prerenderStore = _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();\n    if (prerenderStore && prerenderStore.type === 'prerender') {\n        // dynamicIO Prerender\n        // We're prerendering in a mode that aborts (dynamicIO) and should stall\n        // the promise to ensure the RSC side is considered dynamic\n        return (0, _dynamicrenderingutils.makeHangingPromise)(prerenderStore.renderSignal, '`searchParams`');\n    }\n    // We're prerendering in a mode that does not aborts. We resolve the promise without\n    // any tracking because we're just transporting a value from server to client where the tracking\n    // will be applied.\n    return Promise.resolve({});\n})","createServerParamsForMetadata":"$E(function createServerParamsForServerSegment(underlyingParams, workStore) {\n    const workUnitStore = _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();\n    if (workUnitStore) {\n        switch(workUnitStore.type){\n            case 'prerender':\n            case 'prerender-ppr':\n            case 'prerender-legacy':\n                return createPrerenderParams(underlyingParams, workStore, workUnitStore);\n            default:\n        }\n    }\n    return createRenderParams(underlyingParams, workStore);\n})","createServerParamsForServerSegment":"$E(function createServerParamsForServerSegment(underlyingParams, workStore) {\n    const workUnitStore = _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();\n    if (workUnitStore) {\n        switch(workUnitStore.type){\n            case 'prerender':\n            case 'prerender-ppr':\n            case 'prerender-legacy':\n                return createPrerenderParams(underlyingParams, workStore, workUnitStore);\n            default:\n        }\n    }\n    return createRenderParams(underlyingParams, workStore);\n})","createServerSearchParamsForMetadata":"$E(function createServerSearchParamsForServerPage(underlyingSearchParams, workStore) {\n    const workUnitStore = _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();\n    if (workUnitStore) {\n        switch(workUnitStore.type){\n            case 'prerender':\n            case 'prerender-ppr':\n            case 'prerender-legacy':\n                return createPrerenderSearchParams(workStore, workUnitStore);\n            default:\n        }\n    }\n    return createRenderSearchParams(underlyingSearchParams, workStore);\n})","createServerSearchParamsForServerPage":"$E(function createServerSearchParamsForServerPage(underlyingSearchParams, workStore) {\n    const workUnitStore = _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();\n    if (workUnitStore) {\n        switch(workUnitStore.type){\n            case 'prerender':\n            case 'prerender-ppr':\n            case 'prerender-legacy':\n                return createPrerenderSearchParams(workStore, workUnitStore);\n            default:\n        }\n    }\n    return createRenderSearchParams(underlyingSearchParams, workStore);\n})","createTemporaryReferenceSet":"$E(function(){return new WeakMap})","decodeAction":"$E(function(body,serverManifest){var formData=new FormData,action=null;return body.forEach(function(value1,key){key.startsWith(\"$ACTION_\")?key.startsWith(\"$ACTION_REF_\")?(value1=decodeBoundActionMetaData(body,serverManifest,value1=\"$ACTION_\"+key.slice(12)+\":\"),action=loadServerReference(serverManifest,value1.id,value1.bound)):key.startsWith(\"$ACTION_ID_\")&&(action=loadServerReference(serverManifest,value1=key.slice(11),null)):formData.append(key,value1)}),null===action?null:action.then(function(fn){return fn.bind(null,formData)})})","decodeFormState":"$E(function(actionResult,body,serverManifest){var keyPath=body.get(\"$ACTION_KEY\");if(\"string\"!=typeof keyPath)return Promise.resolve(null);var metaData=null;if(body.forEach(function(value1,key){key.startsWith(\"$ACTION_REF_\")&&(metaData=decodeBoundActionMetaData(body,serverManifest,\"$ACTION_\"+key.slice(12)+\":\"))}),null===metaData)return Promise.resolve(null);var referenceId=metaData.id;return Promise.resolve(metaData.bound).then(function(bound){return null===bound?null:[actionResult,keyPath,referenceId,bound.length-1]})})","decodeReply":"$E(function(body,webpackMap,options){if(\"string\"==typeof body){var form=new FormData;form.append(\"0\",body),body=form}return webpackMap=getChunk(body=createResponse(webpackMap,\"\",options?options.temporaryReferences:void 0,body),0),close(body),webpackMap})","patchFetch":"$E(function patchFetch() {\n    return (0, _patchfetch.patchFetch)({\n        workAsyncStorage: _workasyncstorageexternal.workAsyncStorage,\n        workUnitAsyncStorage: _workunitasyncstorageexternal.workUnitAsyncStorage\n    });\n})","preconnect":"$E(function preconnect(href, crossOrigin, nonce) {\n    const opts = {};\n    if (typeof crossOrigin === 'string') {\n        opts.crossOrigin = crossOrigin;\n    }\n    if (typeof nonce === 'string') {\n        opts.nonce = nonce;\n    }\n    ;\n    _reactdom.default.preconnect(href, opts);\n})","preloadFont":"$E(function preloadFont(href, type, crossOrigin, nonce) {\n    const opts = {\n        as: 'font',\n        type\n    };\n    if (typeof crossOrigin === 'string') {\n        opts.crossOrigin = crossOrigin;\n    }\n    if (typeof nonce === 'string') {\n        opts.nonce = nonce;\n    }\n    _reactdom.default.preload(href, opts);\n})","preloadStyle":"$E(function preloadStyle(href, crossOrigin, nonce) {\n    const opts = {\n        as: 'style'\n    };\n    if (typeof crossOrigin === 'string') {\n        opts.crossOrigin = crossOrigin;\n    }\n    if (typeof nonce === 'string') {\n        opts.nonce = nonce;\n    }\n    _reactdom.default.preload(href, opts);\n})","prerender":"$E(function(model,webpackMap,options){return new Promise(function(resolve,reject){var request=new RequestInstance(PRERENDER,model,webpackMap,options?options.onError:void 0,options?options.identifierPrefix:void 0,options?options.onPostpone:void 0,options?options.temporaryReferences:void 0,options?options.environmentName:void 0,options?options.filterStackFrame:void 0,function(){resolve({prelude:new ReadableStream({type:\"bytes\",start:function(){startWork(request)},pull:function(controller){startFlowing(request,controller)},cancel:function(reason){request.destination=null,abort(request,reason)}},{highWaterMark:0})})},reject);if(options&&options.signal){var signal=options.signal;if(signal.aborted)abort(request,signal.reason);else{var listener=function(){abort(request,signal.reason),signal.removeEventListener(\"abort\",listener)};signal.addEventListener(\"abort\",listener)}}startWork(request)})})","renderToReadableStream":"$E(function(model,webpackMap,options){var request=new RequestInstance(20,model,webpackMap,options?options.onError:void 0,options?options.identifierPrefix:void 0,options?options.onPostpone:void 0,options?options.temporaryReferences:void 0,options?options.environmentName:void 0,options?options.filterStackFrame:void 0,noop,noop);if(options&&options.signal){var signal=options.signal;if(signal.aborted)abort(request,signal.reason);else{var listener=function(){abort(request,signal.reason),signal.removeEventListener(\"abort\",listener)};signal.addEventListener(\"abort\",listener)}}return new ReadableStream({type:\"bytes\",start:function(){startWork(request)},pull:function(controller){startFlowing(request,controller)},cancel:function(reason){request.destination=null,abort(request,reason)}},{highWaterMark:0})})","serverHooks":"$Y","taintObjectReference":"$E(function notImplemented() {\n    throw Object.defineProperty(new Error('Taint can only be used with the taint flag.'), \"__NEXT_ERROR_CODE\", {\n        value: \"E354\",\n        enumerable: false,\n        configurable: true\n    });\n})","workAsyncStorage":"$Y","workUnitAsyncStorage":"$Y"},"url":"$Y","renderOpts":"$Y","workStore":"$Y","parsedRequestHeaders":"$Y","getDynamicParamFromSegment":"$E(function(segment){let segmentParam=getSegmentParam(segment);if(!segmentParam)return null;let key=segmentParam.param,value1=params[key];if(fallbackRouteParams&&fallbackRouteParams.has(segmentParam.param)?value1=fallbackRouteParams.get(segmentParam.param):Array.isArray(value1)?value1=value1.map(i=>encodeURIComponent(i)):\"string\"==typeof value1&&(value1=encodeURIComponent(value1)),!value1){let isCatchall=\"catchall\"===segmentParam.type,isOptionalCatchall=\"optional-catchall\"===segmentParam.type;if(isCatchall||isOptionalCatchall){let dynamicParamType=dynamicParamTypes[segmentParam.type];return isOptionalCatchall?{param:key,value:null,type:dynamicParamType,treeSegment:[key,\"\",dynamicParamType]}:{param:key,value:value1=pagePath.split(\"/\").slice(1).flatMap(pathSegment=>{let param=function(param){let match=param.match(PARAMETER_PATTERN);return match?parseMatchedParameter(match[2]):parseMatchedParameter(param)}(pathSegment);return params[param.key]??param.key}),type:dynamicParamType,treeSegment:[key,value1.join(\"/\"),dynamicParamType]}}}let type=function(type){let short=dynamicParamTypes[type];if(!short)throw Object.defineProperty(Error(\"Unknown dynamic param type\"),\"__NEXT_ERROR_CODE\",{value:\"E378\",enumerable:!1,configurable:!0});return short}(segmentParam.type);return{param:key,value:value1,treeSegment:[key,Array.isArray(value1)?value1.join(\"/\"):value1,type],type:type}})","query":"$0:f:0:3:2:children:1:props:children:0:props:searchParams","isPrefetch":false,"isAction":false,"requestTimestamp":1754854307670,"appUsingSizeAdjustment":true,"flightRouterState":"$Y","requestId":"_nA2lbTBUMvDcVmDcrlo8","pagePath":"/dashboard","clientReferenceManifest":"$Y","assetPrefix":"","isNotFoundPath":false,"nonce":"$undefined","res":"$Y","sharedContext":"$Y"}}}
f:D"$15"
f:null
17:{"name":"ViewportTree","env":"Server","key":"_nA2lbTBUMvDcVmDcrlo8","owner":null,"stack":[],"props":{}}
16:D"$17"
19:{"name":"__next_viewport_boundary__","env":"Server","key":null,"owner":"$17","stack":[],"props":{}}
18:D"$19"
16:["$","$1","_nA2lbTBUMvDcVmDcrlo8",{"children":[["$","$L14",null,{"children":"$L18"},"$17",[],1],["$","meta",null,{"name":"next-size-adjust","content":""},"$17",[],1]]},null,null,0]
1b:{"name":"","env":"Server","key":null,"owner":null,"stack":[],"props":{}}
1a:D"$1b"
1c:{"name":"MetadataTree","env":"Server","key":"_nA2lbTBUMvDcVmDcrlo8","owner":null,"stack":[],"props":{}}
1a:D"$1c"
1e:{"name":"__next_metadata_boundary__","env":"Server","key":null,"owner":"$1c","stack":[],"props":{}}
1d:D"$1e"
1a:[["$","$L13","_nA2lbTBUMvDcVmDcrlo8",{"children":"$L1d"},"$1c",[],1]]
20:{"name":"","env":"Server","key":null,"owner":null,"stack":[],"props":{}}
1f:D"$20"
1f:null
0:{"b":"development","f":[["children","dashboard",["dashboard",{"children":["__PAGE__",{}]}],["dashboard",["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{},null,[],1],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"},null,[],1]]},null,[],0],{"children":["__PAGE__",["$","$1","c",{"children":[["$","$L4",null,{"Component":"$5","searchParams":{},"params":{}},null,[],1],"$undefined",null,["$","$L6",null,{"children":["$L7","$L9","$b"]},null,[],1]]},null,[],0],{},null,false]},null,false],["$","$1","h",{"children":["$f","$16","$1a","$1f"]},null,[],0],false]],"S":false}
1d:["$","$21",null,{"fallback":null,"children":["$","$L22",null,{"promise":"$@23"},"$1e",[],1]},"$1e",[],1]
9:null
18:[["$","meta","0",{"charSet":"utf-8"},"$8",[],0],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"},"$8",[],0]]
e:{"metadata":[["$","title","0",{"children":"Arketic AI Platform - Analytics Dashboard"},"$c",[],0],["$","meta","1",{"name":"description","content":"A comprehensive AI platform with advanced analytics and data visualization"},"$c",[],0],["$","meta","2",{"name":"generator","content":"v0.dev"},"$c",[],0],["$","link","3",{"rel":"icon","href":"/favicon.ico"},"$c",[],0]],"error":null,"digest":"$undefined"}
23:{"metadata":"$e:metadata","error":null,"digest":"$undefined"}
7:null
