{
  "error": "Required test failed: Docker Startup Test",
  "stack": "Error: Required test failed: Docker Startup Test\n    at TestRunner.executeTestSuite (/home/ali/arketic/docker-tests/run-tests.js:118:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async TestRunner.run (/home/ali/arketic/docker-tests/run-tests.js:37:7)",
  "completedTests": [
    {
      "name": "Docker Startup Test",
      "file": "01-docker-startup.test.js",
      "success": false,
      "exitCode": 1,
      "duration": 171293,
      "stdout": "  console.log\n    \u001b[36m[INFO]\u001b[0m Test session started\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m 🚀 Starting Docker Application Startup Test Suite\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m 🧪 Starting test: Stop all existing containers\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    🛑 Stopping all Docker containers...\n\n      at DockerManager.log [as stopAllContainers] (utils/docker-manager.js:49:13)\n\n  console.log\n    ✅ All containers stopped and removed\n\n      at DockerManager.log [as stopAllContainers] (utils/docker-manager.js:58:15)\n\n  console.log\n    \u001b[32m[SUCCESS]\u001b[0m ✅ Test passed: Stop all existing containers (31ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m 🧪 Starting test: Clean up Docker resources\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    🧹 Cleaning up Docker resources...\n\n      at DockerManager.log [as cleanup] (utils/docker-manager.js:69:13)\n\n  console.log\n    ✅ Docker cleanup completed\n\n      at DockerManager.log [as cleanup] (utils/docker-manager.js:74:15)\n\n  console.log\n    \u001b[32m[SUCCESS]\u001b[0m ✅ Test passed: Clean up Docker resources (3052ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m 🧪 Starting test: Start Docker Compose services\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    🚀 Starting Docker Compose services...\n\n      at DockerManager.log [as startDockerCompose] (utils/docker-manager.js:84:13)\n\n#1 [internal] load local bake definitions\n#1 reading from stdin 1.14kB done\n#1 DONE 0.0s\n\n#2 [web internal] load build definition from Dockerfile\n#2 transferring dockerfile:\n#2 transferring dockerfile: 2.53kB done\n#2 DONE 0.1s\n\n#3 [api internal] load build definition from Dockerfile\n#3 transferring dockerfile: 2.49kB done\n#3 DONE 0.1s\n\n#4 [api internal] load metadata for docker.io/library/python:3.11-slim\n#4 DONE 0.0s\n\n#5 [api internal] load .dockerignore\n#5 transferring context: 961B done\n#5 DONE 0.0s\n\n#6 [api base 1/5] FROM docker.io/library/python:3.11-slim\n#6 DONE 0.0s\n\n#7 [api base 4/5] WORKDIR /app\n#7 CACHED\n\n#8 [api base 3/5] RUN useradd --create-home --shell /bin/bash arketic\n#8 CACHED\n\n#9 [api base 2/5] RUN apt-get update && apt-get install -y --no-install-recommends     build-essential     curl     git     libpq-dev     tesseract-ocr     tesseract-ocr-eng     libtesseract-dev     poppler-utils     ffmpeg     libsm6     libxext6     libfontconfig1     libxrender1     libgl1-mesa-glx     ca-certificates     && rm -rf /var/lib/apt/lists/*     && apt-get clean     && apt-get autoremove -y\n#9 CACHED\n\n#10 [api base 5/5] RUN chown -R arketic:arketic /app\n#10 CACHED\n\n#11 [api internal] load build context\n#11 transferring context: 282.17kB done\n#11 DONE 0.0s\n\n#12 [api deps 1/2] COPY requirements.txt .\n#12 CACHED\n\n#13 [api deps 2/2] RUN pip install --user --no-cache-dir --upgrade pip setuptools wheel &&     pip install --user --no-cache-dir -r requirements.txt &&     pip install --user --no-cache-dir gunicorn uvloop httptools\n#13 CACHED\n\n#14 [web internal] load metadata for docker.io/library/node:20-alpine\n#14 DONE 1.2s\n\n#15 [api runner 1/3] COPY --from=deps --chown=arketic:arketic /home/arketic/.local /home/arketic/.local\n#15 DONE 0.7s\n\n#16 [web internal] load .dockerignore\n#16 transferring context: 1.17kB done\n#16 DONE 0.1s\n\n#17 [web base 1/3] FROM docker.io/library/node:20-alpine@sha256:df02558528d3d3d0d621f112e232611aecfee7cbc654f6b375765f72bb262799\n#17 DONE 0.0s\n\n#18 [web base 2/3] RUN apk add --no-cache libc6-compat curl\n#18 CACHED\n\n#19 [web base 3/3] WORKDIR /app\n#19 CACHED\n\n#20 [web internal] load build context\n#20 transferring context: 463.97kB done\n#20 DONE 0.1s\n\n#21 [api runner 2/3] COPY --chown=arketic:arketic . ./\n#21 DONE 0.1s\n\n#22 [web development 1/3] WORKDIR /app\n#22 DONE 0.1s\n\n#23 [web deps 1/2] COPY package*.json ./\n#23 CACHED\n\n#24 [web deps 2/2] RUN npm install --legacy-peer-deps\n#24 CACHED\n\n#25 [api runner 3/3] RUN mkdir -p uploads logs temp &&     chmod 755 uploads logs temp\n#25 DONE 0.3s\n\n#26 [api] exporting to image\n#26 exporting layers\n#26 exporting layers 0.8s done\n#26 writing image sha256:18be7ec02dc13b377ed4899f52ca900a3284043af41bbb938c049a26221628a6 done\n#26 naming to docker.io/library/arketic-test-api done\n#26 DONE 0.8s\n\n#27 [api] resolving provenance for metadata file\n#27 DONE 0.0s\n\n#28 [web development 2/3] COPY --from=deps /app/node_modules ./node_modules\n#28 DONE 2.9s\n\n#29 [web development 3/3] COPY package*.json ./\n#29 DONE 0.1s\n\n#30 [web] exporting to image\n#30 exporting layers 3.0s done\n#30 writing image sha256:6ec3295d7fae9ff6a65fd51ae5266df9b7dbf0f262bcdffe86a4170a73b63a9b done\n#30 naming to docker.io/library/arketic-test-web done\n#30 DONE 3.0s\n\n#31 [web] resolving provenance for metadata file\n#31 DONE 0.0s\n  console.log\n    \u001b[31m[ERROR]\u001b[0m ❌ Test failed: Start Docker Compose services (45023ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m 🧪 Starting test: Wait for services to be healthy\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    🏥 Waiting for services to be healthy...\n\n      at DockerManager.log [as waitForHealthy] (utils/docker-manager.js:111:13)\n\n...........  console.log\n    \n    ⚠️  API health check failed\n\n      at DockerManager.log [as checkAllServicesHealthy] (utils/docker-manager.js:167:19)\n\n............  console.log\n    \u001b[31m[ERROR]\u001b[0m ❌ Test failed: Wait for services to be healthy (120435ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[31m[ERROR]\u001b[0m Container status at failure:\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[31m[ERROR]\u001b[0m NAME                      IMAGE                COMMAND                  SERVICE    CREATED         STATUS                         PORTS\n    arketic-test-api-1        arketic-test-api     \"python -m uvicorn m…\"   api        2 minutes ago   Restarting (2) 9 seconds ago   \n    arketic-test-postgres-1   postgres:15-alpine   \"docker-entrypoint.s…\"   postgres   2 minutes ago   Up 2 minutes (healthy)         0.0.0.0:5432->5432/tcp, [::]:5432->5432/tcp\n    arketic-test-redis-1      redis:7-alpine       \"docker-entrypoint.s…\"   redis      2 minutes ago   Up 2 minutes (healthy)         0.0.0.0:6379->6379/tcp, [::]:6379->6379/tcp\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m 🧪 Starting test: Verify PostgreSQL container health\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[32m[SUCCESS]\u001b[0m ✅ Test passed: Verify PostgreSQL container health (57ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m 🧪 Starting test: Verify Redis container health\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[32m[SUCCESS]\u001b[0m ✅ Test passed: Verify Redis container health (60ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m 🧪 Starting test: Verify API container health\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[31m[ERROR]\u001b[0m ❌ Test failed: Verify API container health (57ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m 🧪 Starting test: Verify Web container health\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[31m[ERROR]\u001b[0m ❌ Test failed: Verify Web container health (46ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m 🧪 Starting test: Verify Nginx container health\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[31m[ERROR]\u001b[0m ❌ Test failed: Verify Nginx container health (46ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m 🧪 Starting test: Connect to PostgreSQL database\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[32m[SUCCESS]\u001b[0m ✅ Test passed: Connect to PostgreSQL database (11ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m Database version: PostgreSQL 15.13 on x86_64-pc-linux-musl, compiled by gcc (Alpine 14.2.0) 14.2.0, 64-bit\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m 🧪 Starting test: Connect to Redis cache\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[32m[SUCCESS]\u001b[0m ✅ Test passed: Connect to Redis cache (8ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m Redis connection successful\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m 🧪 Starting test: Access API health endpoint\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[31m[ERROR]\u001b[0m ❌ Test failed: Access API health endpoint (7ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m 🧪 Starting test: Access Web health endpoint\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[31m[ERROR]\u001b[0m ❌ Test failed: Access Web health endpoint (4ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m 🧪 Starting test: Access Nginx health endpoint\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[31m[ERROR]\u001b[0m ❌ Test failed: Access Nginx health endpoint (3ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m 🧪 Starting test: Verify API database connection\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[31m[ERROR]\u001b[0m ❌ Test failed: Verify API database connection (4ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m 🧪 Starting test: Verify API Redis connection\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[31m[ERROR]\u001b[0m ❌ Test failed: Verify API Redis connection (8ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m 🧪 Starting test: Verify Web API connection\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[31m[ERROR]\u001b[0m ❌ Test failed: Verify Web API connection (3ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m 🧪 Starting test: Verify Nginx proxy functionality\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[31m[ERROR]\u001b[0m ❌ Test failed: Verify Nginx proxy functionality (3ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m 🧪 Starting test: Log container resource usage\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m Container Resource Usage:\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m CONTAINER                                                          CPU %     MEM USAGE / LIMIT\n    8e8a04b5c2316a12b5212dc49de2661dbff32d23234fa4c2cf31d269892305f5   0.00%     0B / 0B\n    34d08e4703e9a35dd62b79bde9194c25c55211e79ab4226be1b29ab9e7f6ccbf   2.37%     32.81MiB / 15.51GiB\n    d6742f34d5e0d7b949fe0807742e384f16ea256d29d6064d85a192d91f722496   1.83%     8.328MiB / 15.51GiB\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[32m[SUCCESS]\u001b[0m ✅ Test passed: Log container resource usage (1572ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m 🧪 Starting test: Confirm Docker environment readiness\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[31m[ERROR]\u001b[0m ❌ Test failed: Confirm Docker environment readiness (0ms)\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n  console.log\n    \u001b[36m[INFO]\u001b[0m ⏱️  Total test suite duration: 2.8m\n\n      at TestLogger.log [as writeLog] (utils/test-logger.js:42:13)\n\n",
      "stderr": "● Validation Warning:\n\n  Unknown option \"runInBand\" with value true was found.\n  This is probably a typing mistake. Fixing it will remove this message.\n\n  Configuration Documentation:\n  https://jestjs.io/docs/configuration\n\n● Validation Warning:\n\n  Unknown option \"runInBand\" with value true was found.\n  This is probably a typing mistake. Fixing it will remove this message.\n\n  Configuration Documentation:\n  https://jestjs.io/docs/configuration\n\n arketic-test-api  Built\n arketic-test-web  Built\n Network arketic_dev_network  Creating\n Network arketic_dev_network  Created\n Volume \"arketic-test_web_node_modules\"  Creating\n Volume \"arketic-test_web_node_modules\"  Created\n Volume \"arketic-test_web_next\"  Creating\n Volume \"arketic-test_web_next\"  Created\n Volume \"arketic-test_web_cache\"  Creating\n Volume \"arketic-test_web_cache\"  Created\n Volume \"arketic-test_postgres_data\"  Creating\n Volume \"arketic-test_postgres_data\"  Created\n Volume \"arketic-test_redis_data\"  Creating\n Volume \"arketic-test_redis_data\"  Created\n Volume \"arketic-test_api_uploads\"  Creating\n Volume \"arketic-test_api_uploads\"  Created\n Volume \"arketic-test_api_logs\"  Creating\n Volume \"arketic-test_api_logs\"  Created\n Container arketic-test-redis-1  Creating\n Container arketic-test-postgres-1  Creating\n Container arketic-test-postgres-1  Created\n Container arketic-test-redis-1  Created\n Container arketic-test-api-1  Creating\n Container arketic-test-api-1  Created\n Container arketic-test-web-1  Creating\n Container arketic-test-web-1  Created\n Container arketic-test-nginx-1  Creating\n Container arketic-test-nginx-1  Created\n Container arketic-test-redis-1  Starting\n Container arketic-test-postgres-1  Starting\n Container arketic-test-postgres-1  Started\n Container arketic-test-redis-1  Started\n Container arketic-test-postgres-1  Waiting\n Container arketic-test-redis-1  Waiting\n Container arketic-test-postgres-1  Healthy\n Container arketic-test-redis-1  Healthy\n Container arketic-test-api-1  Starting\n Container arketic-test-api-1  Started\n Container arketic-test-api-1  Waiting\n Container arketic-test-api-1  Error\ndependency failed to start: container arketic-test-api-1 is unhealthy\nFAIL tests/01-docker-startup.test.js (170.897 s)\n  Docker Application Startup Test\n    Phase 1: Environment Cleanup\n      ✓ should stop all existing containers (42 ms)\n      ✓ should clean up Docker resources (3053 ms)\n    Phase 2: Docker Compose Startup\n      ✕ should start Docker Compose services (45025 ms)\n      ✕ should wait for all services to be healthy (120511 ms)\n    Phase 3: Container Health Verification\n      ✓ should verify PostgreSQL container is healthy (60 ms)\n      ✓ should verify Redis container is healthy (63 ms)\n      ✕ should verify API container is healthy (61 ms)\n      ✕ should verify Web container is healthy (48 ms)\n      ✕ should verify Nginx container is healthy (48 ms)\n    Phase 4: Basic Service Connectivity\n      ✓ should connect to PostgreSQL database (12 ms)\n      ✓ should connect to Redis cache (10 ms)\n      ✕ should access API health endpoint (7 ms)\n      ✕ should access Web health endpoint (5 ms)\n      ✕ should access Nginx health endpoint (4 ms)\n    Phase 5: Service Integration Verification\n      ✕ should verify API can connect to database (5 ms)\n      ✕ should verify API can connect to Redis (9 ms)\n      ✕ should verify Web can connect to API (5 ms)\n      ✕ should verify Nginx can proxy to Web and API (5 ms)\n    Phase 6: Environment Readiness Confirmation\n      ✓ should log container resource usage (1573 ms)\n      ✕ should confirm Docker environment is ready for testing (3 ms)\n\n  ● Docker Application Startup Test › Phase 2: Docker Compose Startup › should start Docker Compose services\n\n    Failed to start Docker Compose: Command failed: docker compose -f /home/ali/arketic/docker-compose.yml -p arketic-test up -d --build --force-recreate\n\n      101 |       console.log('✅ Docker Compose services started');\n      102 |     } catch (error) {\n    > 103 |       throw new Error(`Failed to start Docker Compose: ${error.message}`);\n          |             ^\n      104 |     }\n      105 |   }\n      106 |\n\n      at DockerManager.startDockerCompose (utils/docker-manager.js:103:13)\n      at Object.startDockerCompose (tests/01-docker-startup.test.js:86:29)\n\n  ● Docker Application Startup Test › Phase 2: Docker Compose Startup › should wait for all services to be healthy\n\n    Services failed to become healthy within timeout\n\n      129 |     }\n      130 |     \n    > 131 |     throw new Error('Services failed to become healthy within timeout');\n          |           ^\n      132 |   }\n      133 |\n      134 |   /**\n\n      at DockerManager.waitForHealthy (utils/docker-manager.js:131:11)\n      at Object.<anonymous> (tests/01-docker-startup.test.js:107:9)\n\n  ● Docker Application Startup Test › Phase 3: Container Health Verification › should verify API container is healthy\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"running\"\n    Received: \"restarting\"\n\n      195 |         const container = JSON.parse(status);\n      196 |         \n    > 197 |         expect(container.State).toBe('running');\n          |                                 ^\n      198 |         expect(container.Health).toBe('healthy');\n      199 |         \n      200 |         const duration = Date.now() - startTime;\n\n      at Object.toBe (tests/01-docker-startup.test.js:197:33)\n\n  ● Docker Application Startup Test › Phase 3: Container Health Verification › should verify Web container is healthy\n\n    SyntaxError: Unexpected end of JSON input\n        at JSON.parse (<anonymous>)\n\n      218 |         // Check container status\n      219 |         const status = execSync(`docker compose -p ${projectName} ps web --format json`, { encoding: 'utf8' });\n    > 220 |         const container = JSON.parse(status);\n          |                                ^\n      221 |         \n      222 |         expect(container.State).toBe('running');\n      223 |         expect(container.Health).toBe('healthy');\n\n      at Object.parse (tests/01-docker-startup.test.js:220:32)\n\n  ● Docker Application Startup Test › Phase 3: Container Health Verification › should verify Nginx container is healthy\n\n    SyntaxError: Unexpected end of JSON input\n        at JSON.parse (<anonymous>)\n\n      243 |         // Check container status\n      244 |         const status = execSync(`docker compose -p ${projectName} ps nginx --format json`, { encoding: 'utf8' });\n    > 245 |         const container = JSON.parse(status);\n          |                                ^\n      246 |         \n      247 |         expect(container.State).toBe('running');\n      248 |         expect(container.Health).toBe('healthy');\n\n      at Object.parse (tests/01-docker-startup.test.js:245:32)\n\n  ● Docker Application Startup Test › Phase 4: Basic Service Connectivity › should access API health endpoint\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      310 |         const result = await testUtils.testHttpEndpoint(url, 200);\n      311 |         \n    > 312 |         expect(result.success).toBe(true);\n          |                                ^\n      313 |         expect(result.status).toBe(200);\n      314 |         \n      315 |         const duration = Date.now() - startTime;\n\n      at Object.toBe (tests/01-docker-startup.test.js:312:32)\n\n  ● Docker Application Startup Test › Phase 4: Basic Service Connectivity › should access Web health endpoint\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      332 |         const result = await testUtils.testHttpEndpoint(url, 200);\n      333 |         \n    > 334 |         expect(result.success).toBe(true);\n          |                                ^\n      335 |         expect(result.status).toBe(200);\n      336 |         \n      337 |         const duration = Date.now() - startTime;\n\n      at Object.toBe (tests/01-docker-startup.test.js:334:32)\n\n  ● Docker Application Startup Test › Phase 4: Basic Service Connectivity › should access Nginx health endpoint\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      354 |         const result = await testUtils.testHttpEndpoint(url, 200);\n      355 |         \n    > 356 |         expect(result.success).toBe(true);\n          |                                ^\n      357 |         expect(result.status).toBe(200);\n      358 |         \n      359 |         const duration = Date.now() - startTime;\n\n      at Object.toBe (tests/01-docker-startup.test.js:356:32)\n\n  ● Docker Application Startup Test › Phase 5: Service Integration Verification › should verify API can connect to database\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      378 |         const result = await testUtils.makeRequest('GET', `${TEST_CONFIG.endpoints.api.baseUrl}/health`);\n      379 |         \n    > 380 |         expect(result.success).toBe(true);\n          |                                ^\n      381 |         expect(result.data).toHaveProperty('database');\n      382 |         expect(result.data.database).toBe('healthy');\n      383 |         \n\n      at Object.toBe (tests/01-docker-startup.test.js:380:32)\n\n  ● Docker Application Startup Test › Phase 5: Service Integration Verification › should verify API can connect to Redis\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      400 |         const result = await testUtils.makeRequest('GET', `${TEST_CONFIG.endpoints.api.baseUrl}/health`);\n      401 |         \n    > 402 |         expect(result.success).toBe(true);\n          |                                ^\n      403 |         expect(result.data).toHaveProperty('redis');\n      404 |         expect(result.data.redis).toBe('healthy');\n      405 |         \n\n      at Object.toBe (tests/01-docker-startup.test.js:402:32)\n\n  ● Docker Application Startup Test › Phase 5: Service Integration Verification › should verify Web can connect to API\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      422 |         const result = await testUtils.makeRequest('GET', `${TEST_CONFIG.endpoints.web.baseUrl}/api/health`);\n      423 |         \n    > 424 |         expect(result.success).toBe(true);\n          |                                ^\n      425 |         \n      426 |         const duration = Date.now() - startTime;\n      427 |         logger.logTestPass('Verify Web API connection', duration);\n\n      at Object.toBe (tests/01-docker-startup.test.js:424:32)\n\n  ● Docker Application Startup Test › Phase 5: Service Integration Verification › should verify Nginx can proxy to Web and API\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      441 |         // Test Nginx proxying to web\n      442 |         const webResult = await testUtils.makeRequest('GET', 'http://localhost:80');\n    > 443 |         expect(webResult.success).toBe(true);\n          |                                   ^\n      444 |         \n      445 |         // Test Nginx proxying to API\n      446 |         const apiResult = await testUtils.makeRequest('GET', 'http://localhost:80/api/health');\n\n      at Object.toBe (tests/01-docker-startup.test.js:443:35)\n\n  ● Docker Application Startup Test › Phase 6: Environment Readiness Confirmation › should confirm Docker environment is ready for testing\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      484 |       try {\n      485 |         // Verify all critical components are working\n    > 486 |         expect(dockerManager.isRunning).toBe(true);\n          |                                         ^\n      487 |         \n      488 |         // Final connectivity checks\n      489 |         const dbCheck = await testUtils.testDatabaseConnection();\n\n      at Object.toBe (tests/01-docker-startup.test.js:486:41)\n\nTest Suites: 1 failed, 1 total\nTests:       13 failed, 7 passed, 20 total\nSnapshots:   0 total\nTime:        170.921 s\nRan all test suites matching /\\/home\\/ali\\/arketic\\/docker-tests\\/tests\\/01-docker-startup.test.js/i.\n"
    }
  ],
  "timestamp": "2025-08-05T20:13:35.384Z"
}