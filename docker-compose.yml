
services:
  # PostgreSQL Database
  postgres:
    image: pgvector/pgvector:pg15
    restart: unless-stopped
    environment:
      POSTGRES_DB: arketic_dev
      POSTGRES_USER: arketic
      POSTGRES_PASSWORD: arketic_dev_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init-db.sql
      - ./scripts/init-db-users.sql:/docker-entrypoint-initdb.d/02-init-users.sql
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U arketic -d arketic_dev"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/dev.conf:/etc/redis/redis.conf
    command: redis-server /etc/redis/redis.conf
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5
    environment:
      - REDIS_PASSWORD=

  # FastAPI Backend
  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
      target: development  # Use development target for single worker
    restart: unless-stopped
    entrypoint: ["/app/entrypoint.sh"]
    command: ["python", "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload", "--log-level", "debug"]
    ports:
      - "8000:8000"
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '1'
          memory: 512M
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://arketic:arketic_dev_password@postgres:5432/arketic_dev
      - REDIS_URL=redis://redis:6379/0
      - HOST=0.0.0.0
      - PORT=8000
      - CORS_ORIGINS=http://localhost:3000,http://web:3000,http://localhost:80,http://nginx
      - JWT_SECRET_KEY=arketic-dev-secret-key-change-in-production-32-chars-minimum-for-security
      - LANGCHAIN_INTERNAL_API_KEY=dev_internal_api_key_change_in_production
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - GROQ_API_KEY=${GROQ_API_KEY:-}
    volumes:
      - ./apps/api:/app
      - api_uploads:/app/uploads
      - api_logs:/app/logs
      - /app/.venv
      - /app/__pycache__
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "healthcheck.py"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Next.js Frontend
  web:
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
      target: development
      args:
        - NEXT_PUBLIC_API_URL=http://localhost:8000
        - NEXT_PUBLIC_APP_ENV=development
        - NODE_ENV=development
    entrypoint: ["/usr/local/bin/docker-entrypoint.sh"]
    command: ["pnpm", "run", "dev"]
    working_dir: /app/apps/web
    restart: unless-stopped
    ports:
      - "3000:3000"
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 2G
        reservations:
          cpus: '2'
          memory: 1G
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_APP_ENV=development
      - DOCKER_ENV=true
      - WATCHPACK_POLLING=false
      - CHOKIDAR_USEPOLLING=false
      - WATCHPACK_WATCHER_LIMIT=0
      - CHOKIDAR_INTERVAL=3000
      - CHOKIDAR_AWAITWRITEFINISH_STABILITYTH=2000
      - NEXT_TELEMETRY_DISABLED=1
    volumes:
      - ./apps/web:/app/apps/web
      - ./pnpm-lock.yaml:/app/pnpm-lock.yaml:ro
      - ./pnpm-workspace.yaml:/app/pnpm-workspace.yaml:ro
      - web_node_modules:/app/apps/web/node_modules
      - web_next:/app/apps/web/.next
      - web_cache:/app/apps/web/.next/cache
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # LangChain Microservice
  langchain:
    build:
      context: ./apps/langchain
      dockerfile: Dockerfile
    container_name: arketic-langchain
    restart: unless-stopped
    ports:
      - "3001:3001"
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    environment:
      - NODE_ENV=development
      - PORT=3001
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_DB=0
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=arketic
      - DB_PASSWORD=arketic_dev_password
      - DB_NAME=arketic_dev
      - JWT_SECRET_KEY=arketic-dev-secret-key-change-in-production-32-chars-minimum-for-security
      - INTERNAL_API_KEY=dev_internal_api_key_change_in_production
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - GROQ_API_KEY=${GROQ_API_KEY:-}
      - CORS_ORIGIN=http://localhost:3000,http://localhost:8000,http://web:3000,http://api:8000
      - LOG_LEVEL=debug
    volumes:
      - ./apps/langchain/src:/app/src
      - ./apps/langchain/tests:/app/tests
      - langchain_node_modules:/app/node_modules
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - default

  # Nginx Reverse Proxy (Development)
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/dev.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - web
      - api
      - langchain
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  api_uploads:
    driver: local
  api_logs:
    driver: local
  web_node_modules:
    driver: local
  web_next:
    driver: local
  web_cache:
    driver: local
  langchain_node_modules:
    driver: local

networks:
  default:
    name: arketic_dev_network